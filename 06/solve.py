with open("input.txt") as f:
    state = list(map(int, f.readline().strip().split(',')))


# Part 1
def compute_state(state, days):
    if days < 1:
        return state

    new = sum(1 for s in state if s == 0)
    return compute_state(
        [(s - 1) % 7 if s < 7 else (s - 1)  for s in state] + new * [8],
        days - 1
    )


print("Part 1 f1", len(compute_state(state, 80)))


# Part 2
# Each lanterfish is independent. So the amount of fishes generated by a "ancestor" with counter
# 1, 2, 3... is the same for the period. The one can one count how many of each counter there is
# in the start and sum.


cache = {}

def compute_generated_fishes(counter, days):
    if days == 0 or counter > days:
        return 1

    if (counter, days) not in cache:
        if counter > 0:
            # We could compute_generated_fishes(counter - 1, days - 1) but we can FF
            total = compute_generated_fishes(0, days - counter)
        else:
            total = (
                compute_generated_fishes(6, days - 1) +
                compute_generated_fishes(8, days - 1)
            )
        cache[(counter, days)] = total
    return cache[(counter, days)]

print("Part 1 f2", sum(compute_generated_fishes(s, 80) for s in state))
print("Part 2", sum(compute_generated_fishes(s, 256) for s in state))
